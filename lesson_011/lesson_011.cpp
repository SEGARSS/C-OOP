//Перегрузка оператора равенства == и не равно !=. Перегрузка логических операторов сравнения. C++ #84 - Видео 13.

#include<iostream>
#include<string>
using namespace std;


//-----------------------------------------------------------------------------------------------------
class point
{
public:
	point()
	{
		x = 0;
		y = 0;
	}

	point(int valueX, int valueY)
	{
		x = valueX;
		y = valueY;
	}

	bool operator == (const point &other)
	{
		return this->x == other.x && this->y == other.y;
	}

	bool operator != (const point &other)
	{
		return !(this->x == other.x && this->y == other.y);
	}	

private:
	int x;
	int y;
};
//-----------------------------------------------------------------------------------------------------
int main()
{
	setlocale(LC_ALL, "ru");

	point a(6, 1);
	point b(6, 1);

	point t(5, 1);
	point j(6, 3);

	/*
	Сравнение идёт кардинт (х) и (у). Где переменная (а) с кординой (х)-6, (у)-1. 
	Переменная (b) с кординой (х)-6, (у)-1. И сравниваем кардинаты переменных (а) и (b).
	Тоже самое как для примера делаем с переменными (t) (j).
	Получаем true - (1) - если равны, false - (0) - если не равны.
	*/

	bool result = a == b;
	cout << result << endl;

	bool result2 = t == j;
	cout << result2 << endl;

	/*Теперь проверка оператора не равенства (!=).
	Если не равны, то получим true - (1), если равны то - false - (0)*/

	bool result3 = a != b;
	cout << result3 << endl;

	bool result4 = t != j;
	cout << result4 << endl;
			
	return 0;
}
//-----------------------------------------------------------------------------------------------------
/*
Операторы равенства - не равенства или (== - !=)
В классе point создали оператор булевой переменной bool;
И сделали ему перегрузку, чтобы можно было проверить и на равеснтво - == и на неравеснтво - !=.
Реализация оператора bool или просто булевой переменной можно написать так - 

bool resul = a == b;
if(a==b)
{
	return true;
}
else
{
	return false
};
Данный вариант записи, нубский) Достаточно просто реализовать
if(a == b);
и всё, потомучто это булеевая переменная, ей не нужно дополнительно что-то указывать,
она и так поймёт если выражение её не совпадёт, вернёт ложь false, если соблюдаеться условие
то вернёт true третьего не данно. Аналогично и с неравенством.
*/