//Дружественные функции и классы пример. Для чего используются. Как определяются. Для двух классов #88 - Видео №19.

#include<iostream>
#include<string>
using namespace std;


//------------------------------------------------------------------------------------------
class Test;
//------------------------------------------------------------------------------------------
class Point
{
public:

	Point()
	{
		x = 0;
		y = 0;
	}
	Point(int valueX, int valueY)
	{
		x = valueX;
		y = valueY;
	}

	void Print()
	{
		cout << "X = " << x << "\t Y = " << y << endl << endl;
	}

	friend void ChangeX(Point &value, Test &testvalue);//Даёт доступ к даннымм (x) и (y).

private:
	int x;
	int y;
};
//------------------------------------------------------------------------------------------
class Test
{
public:
	void PrintD()
	{
		cout << "Тест " << data << endl << endl;
	}

private:
	friend void ChangeX(Point &value, Test &testvalue);//Даёт доступ к даннымм (data)

	int data = 0;
};
//------------------------------------------------------------------------------------------
void ChangeX(Point &value, Test &testvalue) // Дружественная функция.
{
	value.x = -1; // Из класса Point данные.
	value.y = +5;// Из класса Point данные.
	testvalue.data; // Из класса Test данные.
}
//------------------------------------------------------------------------------------------
int main()
{
	setlocale(LC_ALL, "ru");

	Test test;

	Point a(5, 13);
	a.Print();

	ChangeX(a, test);
	a.Print();

	test.PrintD();

	return 0;
}
//------------------------------------------------------------------------------------------
/*
Создали дружественную функцию.
void ChangeX(Point &value, Test &testvalue)
И подружили её с классами Point и класс Test.
Для того чтобы функцию подружить с классами, необходимо её прописать в нутри классов, причём не важно где, хоть в public: хоть
в private. Тогда функция ссможет пользоваться данными класса, а клас сможет предоставлять ей доступ.
Также стоит заметить одну вещь, в функции пристутствует cразу и клас Point и Test, прописав это как в этом уроке в классе Point
вот так - friend void ChangeX(Point& value, Test &testvalue); класс не увидит значения класса Test &testvalue, почему?
Потомучто класс тест Test создан ниже клсса Point и не видит какие там есть данные чтоб их подтянуть.
И для этого выше созданного класса Point мы просто прописываем class Test; и тогда класс Point будет понимать что он есть,
и сможет из него брать данные.
*/