//Виртуальные методы класса c++. Ключевое слово virtual. Ключевое слово override. ООП. C++ #103 - Видео №36.

#include<iostream>
#include<string>
using namespace std;

//-------------------------------------------------------------------------------------------------------------
class Gun 
{
public:
	virtual void Shoot()
	{
		cout << "BANG!" << endl;
	}
};
//-------------------------------------------------------------------------------------------------------------
class SubmachineGun :public Gun
{
public:
	void Shoot() override
	{
		cout << "BANG!" << "BANG!" << "BANG!" << endl;
	}
};
//-------------------------------------------------------------------------------------------------------------
class Bazuka :public Gun
{
public:
	void Shoot() override
	{
		cout << "BADABUM!!!" << endl;
	}
};
//-------------------------------------------------------------------------------------------------------------
class Player
{
public:
	void Shoot(Gun *gun)
	{
		gun->Shoot();
	}
};
//-------------------------------------------------------------------------------------------------------------
int main()
{
	setlocale(LC_ALL,"ru");

	Gun gun;				   // Пистолет.
	SubmachineGun mach; // Автомат
	Bazuka bazuka;		 // Базука

	Player player;    // Игрок

	player.Shoot(&bazuka);// Меняем оружие

	return 0;
}
//-------------------------------------------------------------------------------------------------------------
/*
override - дополнительный контроль.
создав virtual void Shoot() в классе Gun, данный метод используем в других класса с помощью наследования.
если в других классах, мы попробуем исправить метод void Shoot(), к примеру добавить ему данные void Shoot(int a),
то благодаря тому что у нас изначально написанно вот так - void Shoot() override, то нам компелятор сразу подскажет,
что если мы так сделам, это уже будт не унаследованный метод из класса Gun, а совершенно другой метод.
Поэтому override это дополнительный контроль от комплятора для нас. Без него тоже всё будет рабоать, так как нам нужно,
но есть риск того что допустим ошибку, внесём изминения и сами не заметим это, а потом долго будем выискивать причину
сбоя или не правильно работы программы.

В чём сысл такой реализации. Класс игрок - Player. Пользуется виртуальным методом Shoot. И добавляя дальше разные виды вооружения,
нам в классе Player уже ничего не надо менять, он уже может пользоваться другими оружиями, как новыми так и действующими.
Поэтому виртуальные методы нужны и удобны. А override, просто помогает избежать рисков ошибок, доп страховка для самих себя.
*/