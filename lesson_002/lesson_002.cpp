//Модификаторы доступа классов. public private protected что это. Спецификаторы доступа. C++ Урок #75 - Видео №4

#include<iostream>
#include<string>
using namespace std;


//---------------------------------------------------------------------------------------------------------------------------
class Point
{
public:
	void Print()
	{
		cout << "x = " << x << "\ny = " << y << "\nz = " << z << endl << endl;
		PrintY();
	}

	int x = 9;	

private:
	void PrintY()
	{
		cout << "Модификатор private: " << "Print() = y = " << y << endl;
	}

	int z = 5;
	int y = 3;
};
//---------------------------------------------------------------------------------------------------------------------------
int main()
{
	setlocale(LC_ALL, "ru");

	Point a;
	a.Print(); // Обращаемся в обектам которые лежат в модификатор public:
			  // Но в нутри метода Print, мы также указали обращение к методу PrintY(), который прописан в модификаторе private:
	return 0;
}
//---------------------------------------------------------------------------------------------------------------------------
/*
По умолчанию, при создании класса, по умолчанию не явно создаёться модификатор private: 
В классе class Point, модификатор public: и всё что идёт ниже данного модификатора в классе, нам доступно для работы.
в всё что идёт ниже метода private: от слова приват, мы использовать не можем в функции main, это приватная закрытая часть.
Но зато в самом классе, в class Point мы можем взаимодействовать со всеми методами и модификаторами, и теми данными
что прописанны под ними и их вызывать. Тоесть, ниже public: мы описали void Print() где смогли обратить
к тем данным, которые находяться в модификаторе private: и потом смогли просто это вызвать с помощью a.Print();
Но в самом int main() если бы мы поробовали бы обратиться к данным которые находяться в классе class Point
и прописанны непосредственно ниже private:, у нас бы ничего не вышло, кроме ошибки.
На будущие, данные мы вызвать с могли из модификатора private, но что рабоать с данными в данной секции, потребуется Get и Set.
Для чего это нужно? это принцип действия инкапсуляции, чтобы небыло к данным доступа из вне (принцип независимости данных).
*/